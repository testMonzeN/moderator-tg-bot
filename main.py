from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler
)
from datetime import datetime, timedelta
import re
import random
import os


class Karadevfacekid:
    def __init__(self, token: str, bad_words_file: str = "badwords.txt", log_file: str = "violations.log"):
        self.TOKEN = token
        self.BAD_WORDS_FILE = bad_words_file
        self.LOG_FILE = log_file
        self.BAD_WORDS = self.load_bad_words()
        self.WARNINGS = [
            "@{username}, —É –Ω–∞—Å –∑–∞–ø—Ä–µ—â–µ–Ω—ã —Ç–∞–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è! ‚ö†Ô∏è",
            "–≠–π, @{username}, —Å–ª–µ–¥–∏ –∑–∞ —è–∑—ã–∫–æ–º! üö´",
            "@{username}, —ç—Ç–æ —Å–ª–æ–≤–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ!",
            "–û–π, @{username}, —Ç–∞–∫ –Ω–µ–ª—å–∑—è –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è! üôä"
        ]
        self.GREETINGS = [
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}! üéâ",
            "–ü—Ä–∏–≤–µ—Ç, {username}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ! üòä",
            "{username}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É—é—Ç–Ω—ã–π —á–∞—Ç! ü•≥"
        ]
        self.violations = {}
        self.violation_messages = {}
        self.is_enabled = True
        self.suspicious_users = {}

    def load_bad_words(self) -> list:
        try:
            with open(self.BAD_WORDS_FILE, "r", encoding="utf-8") as file:
                words = [line.strip().lower() for line in file if line.strip()]
                return words
        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞: {e}")
            return []

    def log_violation(self, username: str, text: str):
        try:
            with open(self.LOG_FILE, "a", encoding="utf-8") as f:
                f.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] @{username}: {text}\n")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

    def contains_bad_words(self, text: str) -> bool:
        try:
            clean_text = re.sub(r"[^\w\s]", "", text.lower())
            return any(
                re.search(rf"\b{re.escape(word)}\b", clean_text)
                for word in self.BAD_WORDS
            )
        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False

    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_enabled:
            return

        if not update.message or not update.message.text:
            return

        user = update.message.from_user
        text = update.message.text
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        if self.contains_bad_words(text):
            try:
                warning = random.choice(self.WARNINGS).format(username=user.username)
                await update.message.reply_text(warning)
                self.log_violation(user.username, text)

                if user.username in self.violations:
                    self.violations[user.username] += 1
                    self.violation_messages[user.username].append((timestamp, text))
                else:
                    self.violations[user.username] = 1
                    self.violation_messages[user.username] = [(timestamp, text)]
            except Exception as e:
                print(f"üö® –û—à–∏–±–∫–∞: {e}")

    async def greet_new_members(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_enabled:
            return

        for member in update.message.new_chat_members:
            if member.username in self.suspicious_users:
                keyboard = [
                    [InlineKeyboardButton("–î–∞", callback_data=f"ban_{member.id}")],
                    [InlineKeyboardButton("–ù–µ—Ç", callback_data=f"forgive_{member.id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    f"‚ö†Ô∏è –í—ã–≥–Ω–∞—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{member.username}? (–¥–∞/–Ω–µ—Ç)",
                    reply_markup=reply_markup
                )
            else:
                greeting = random.choice(self.GREETINGS).format(username=member.username)
                await update.message.reply_text(greeting)

        await self.scan_members(update, context)

    async def reload_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.BAD_WORDS = self.load_bad_words()
        await update.message.reply_text(f"‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ! –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {len(self.BAD_WORDS)}")

    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            parts = update.message.text.split()
            username = parts[1].replace("@", "")
            limit = int(parts[2]) if len(parts) > 2 else 5

            if username in self.violations:
                count = self.violations[username]
                messages = self.violation_messages.get(username, [])
                last_messages = messages[-limit:]

                response = f"üìä @{username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞) –º–∞—Ç—ã {count} —Ä–∞–∑(–∞).\n"
                response += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–∞—Ç–∞–º–∏:\n"
                response += "\n".join(f"‚Ä¢ [{timestamp}] {msg}" for timestamp, msg in last_messages)

                await update.message.reply_text(response)
            else:
                await update.message.reply_text(f"üìä @{username} –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞) –º–∞—Ç—ã.")
        except IndexError:
            await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /hist @username [N]")
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è N –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    async def mode_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            mode = update.message.text.split()[1].lower()
            if mode == "enable":
                self.is_enabled = True
                await update.message.reply_text("‚úÖ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã.")
            elif mode == "disable":
                self.is_enabled = False
                await update.message.reply_text("‚õî –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã.")
            else:
                await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /mode enable –∏–ª–∏ /mode disable")
        except IndexError:
            await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /mode enable –∏–ª–∏ /mode disable")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        status = "‚úÖ –í–∫–ª—é—á—ë–Ω" if self.is_enabled else "‚õî –û—Ç–∫–ª—é—á—ë–Ω"
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="mode_enable")],
            [InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="mode_disable")],
            [InlineKeyboardButton("–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", callback_data="status")],
            [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üìú –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    async def enemy_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.is_admin(update, context):
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        try:
            parts = update.message.text.split()
            if len(parts) < 2:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /enemy add @username, /enemy list, /enemy delete all, /enemy delete @username")
                return

            action = parts[1].lower()

            if action == "add":
                if len(parts) < 3:
                    await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /enemy add @username")
                    return
                username = parts[2].replace("@", "")
                self.suspicious_users[username] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö.")

            elif action == "list":
                if not self.suspicious_users:
                    await update.message.reply_text("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
                else:
                    response = "üìú –°–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                    for username, date_added in self.suspicious_users.items():
                        response += f"‚Ä¢ @{username} (–¥–æ–±–∞–≤–ª–µ–Ω: {date_added})\n"
                    await update.message.reply_text(response)

            elif action == "delete":
                if len(parts) < 3:
                    await update.message.reply_text(
                        "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /enemy delete all –∏–ª–∏ /enemy delete @username")
                    return

                target = parts[2].lower()
                if target == "all":
                    self.suspicious_users.clear()
                    await update.message.reply_text("‚úÖ –í—Å–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞.")
                else:
                    username = target.replace("@", "")
                    if username in self.suspicious_users:
                        del self.suspicious_users[username]
                        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö.")
                    else:
                        await update.message.reply_text(
                            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö.")

            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /enemy add, /enemy list, /enemy delete")

        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data.startswith("ban_"):
            user_id = int(query.data.split("_")[1])
            await context.bot.ban_chat_member(query.message.chat_id, user_id,
                                              until_date=datetime.now() + timedelta(days=3))
            await query.edit_message_text(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 3 –¥–Ω—è.")
        elif query.data.startswith("forgive_"):
            user_id = int(query.data.split("_")[1])
            await query.edit_message_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—â—ë–Ω, –Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º.")
        elif query.data == "mode_enable":
            self.is_enabled = True
            await query.edit_message_text("‚úÖ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã.")
        elif query.data == "mode_disable":
            self.is_enabled = False
            await query.edit_message_text("‚õî –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã.")
        elif query.data == "status":
            status = "‚úÖ –í–∫–ª—é—á—ë–Ω" if self.is_enabled else "‚õî –û—Ç–∫–ª—é—á—ë–Ω"
            await query.edit_message_text(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}")
        elif query.data == "help":
            help_text = """
                üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

                ‚Ä¢ /mode enable ‚Äî –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞.
                ‚Ä¢ /mode disable ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞.
                ‚Ä¢ /status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞.
                ‚Ä¢ /reload ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.
                ‚Ä¢ /hist @username [N] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é N=5).
                ‚Ä¢ /enemy add @username ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö.
                ‚Ä¢ /enemy list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                ‚Ä¢ /enemy delete all ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                ‚Ä¢ /enemy delete @username ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞.
                ‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
            """
            await query.edit_message_text(help_text)

    async def is_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        chat_id = update.message.chat_id
        user_id = update.message.from_user.id
        admins = await context.bot.get_chat_administrators(chat_id)
        return any(admin.user.id == user_id for admin in admins)

    async def scan_members(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.is_admin(update, context):
            return

        try:
            chat_id = update.message.chat_id
            members = []

            admins = await context.bot.get_chat_administrators(chat_id)
            members.extend(admin.user for admin in admins)

            suspicious_found = []
            for member in members:
                if member.username in self.suspicious_users:
                    suspicious_found.append(f"@{member.username}")

            if suspicious_found:
                response = "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
                response += "\n".join(suspicious_found)
            else:
                response = "‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

            await update.message.reply_text(response)
        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

    def run(self):
        app = ApplicationBuilder().token(self.TOKEN).build()

        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.message_handler))
        app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, self.greet_new_members))
        app.add_handler(CommandHandler("reload", self.reload_command))
        app.add_handler(CommandHandler("hist", self.history_command))
        app.add_handler(CommandHandler("mode", self.mode_command))
        app.add_handler(CommandHandler("status", self.status_command))
        app.add_handler(CommandHandler("help", self.help_command))
        app.add_handler(CommandHandler("enemy", self.enemy_command))
        app.add_handler(CallbackQueryHandler(self.button_handler))
        app.add_handler(CommandHandler("scan", self.scan_members))

        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        app.run_polling()


if __name__ == "__main__":
    bot = Karadevfacekid(token="6424644818:AAFOqGJHy4kgYksY4JLo3Mp8s2MTwlpsSSk")
    bot.run()
